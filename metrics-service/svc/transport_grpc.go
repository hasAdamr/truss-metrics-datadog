// Code generated by truss.
// Rerunning truss will overwrite this file.
// DO NOT EDIT!

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"net/http"

	"golang.org/x/net/context"
	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/hasAdamr/truss-metrics-datadog/metrics-service"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC MetricsServer.
func MakeGRPCServer(ctx context.Context, endpoints Endpoints) pb.MetricsServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	return &grpcServer{
		// metrics

		fast: grpctransport.NewServer(
			ctx,
			endpoints.FastEndpoint,
			DecodeGRPCFastRequest,
			EncodeGRPCFastResponse,
			serverOptions...,
		),
		slow: grpctransport.NewServer(
			ctx,
			endpoints.SlowEndpoint,
			DecodeGRPCSlowRequest,
			EncodeGRPCSlowResponse,
			serverOptions...,
		),
		randomerror: grpctransport.NewServer(
			ctx,
			endpoints.RandomErrorEndpoint,
			DecodeGRPCRandomErrorRequest,
			EncodeGRPCRandomErrorResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the MetricsServer interface
type grpcServer struct {
	fast        grpctransport.Handler
	slow        grpctransport.Handler
	randomerror grpctransport.Handler
}

// Methods for grpcServer to implement MetricsServer interface

func (s *grpcServer) Fast(ctx context.Context, req *pb.Empty) (*pb.Empty, error) {
	_, rep, err := s.fast.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.Empty), nil
}

func (s *grpcServer) Slow(ctx context.Context, req *pb.Empty) (*pb.Empty, error) {
	_, rep, err := s.slow.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.Empty), nil
}

func (s *grpcServer) RandomError(ctx context.Context, req *pb.Empty) (*pb.Empty, error) {
	_, rep, err := s.randomerror.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.Empty), nil
}

// Server Decode

// DecodeGRPCFastRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC fast request to a user-domain fast request. Primarily useful in a server.
func DecodeGRPCFastRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.Empty)
	return req, nil
}

// DecodeGRPCSlowRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC slow request to a user-domain slow request. Primarily useful in a server.
func DecodeGRPCSlowRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.Empty)
	return req, nil
}

// DecodeGRPCRandomErrorRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC randomerror request to a user-domain randomerror request. Primarily useful in a server.
func DecodeGRPCRandomErrorRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.Empty)
	return req, nil
}

// Server Encode

// EncodeGRPCFastResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain fast response to a gRPC fast reply. Primarily useful in a server.
func EncodeGRPCFastResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.Empty)
	return resp, nil
}

// EncodeGRPCSlowResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain slow response to a gRPC slow reply. Primarily useful in a server.
func EncodeGRPCSlowResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.Empty)
	return resp, nil
}

// EncodeGRPCRandomErrorResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain randomerror response to a gRPC randomerror reply. Primarily useful in a server.
func EncodeGRPCRandomErrorResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.Empty)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md *metadata.MD) context.Context {
	for k, v := range *md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
