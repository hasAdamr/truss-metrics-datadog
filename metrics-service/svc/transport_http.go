// Code generated by truss.
// Rerunning truss will overwrite this file.
// DO NOT EDIT!
// Version: 88eea2e0a6
// Version Date: Wed Jun 14 01:22:16 UTC 2017

package svc

// This file provides server-side bindings for the HTTP transport.
// It utilizes the transport/http.Server.

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"

	"golang.org/x/net/context"

	"github.com/go-kit/kit/log"
	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/pkg/errors"

	// This service
	pb "github.com/hasAdamr/truss-metrics-datadog/metrics-service"
)

var (
	_ = fmt.Sprint
	_ = bytes.Compare
	_ = strconv.Atoi
	_ = httptransport.NewServer
	_ = ioutil.NopCloser
	_ = pb.RegisterMetricsServer
	_ = io.Copy
	_ = errors.Wrap
)

// MakeHTTPHandler returns a handler that makes a set of endpoints available
// on predefined paths.
func MakeHTTPHandler(ctx context.Context, endpoints Endpoints, logger log.Logger) http.Handler {
	serverOptions := []httptransport.ServerOption{
		httptransport.ServerBefore(headersToContext),
		httptransport.ServerErrorEncoder(errorEncoder),
		httptransport.ServerAfter(httptransport.SetContentType("application/json; charset=utf-8")),
	}
	m := http.NewServeMux()

	m.Handle("/fast", httptransport.NewServer(
		ctx,
		endpoints.FastEndpoint,
		DecodeHTTPFastZeroRequest,
		EncodeHTTPGenericResponse,
		serverOptions...,
	))

	m.Handle("/slow", httptransport.NewServer(
		ctx,
		endpoints.SlowEndpoint,
		DecodeHTTPSlowZeroRequest,
		EncodeHTTPGenericResponse,
		serverOptions...,
	))

	m.Handle("/randomerror", httptransport.NewServer(
		ctx,
		endpoints.RandomErrorEndpoint,
		DecodeHTTPRandomErrorZeroRequest,
		EncodeHTTPGenericResponse,
		serverOptions...,
	))
	return m
}

func errorEncoder(_ context.Context, err error, w http.ResponseWriter) {
	code := http.StatusInternalServerError
	msg := err.Error()

	w.WriteHeader(code)
	json.NewEncoder(w).Encode(errorWrapper{Error: msg})
}

type errorWrapper struct {
	Error string `json:"error"`
}

// Server Decode

// DecodeHTTPFastZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded fast request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPFastZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req pb.Empty
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		if err = json.Unmarshal(buf, &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, fmt.Errorf("request body '%s': cannot parse non-json request body", buf)
		}
	}

	pathParams, err := PathParams(r.URL.Path, "/fast")
	_ = pathParams
	if err != nil {
		return nil, errors.Wrap(err, "cannot unmarshal path parameters")
	}

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPSlowZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded slow request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPSlowZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req pb.Empty
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		if err = json.Unmarshal(buf, &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, fmt.Errorf("request body '%s': cannot parse non-json request body", buf)
		}
	}

	pathParams, err := PathParams(r.URL.Path, "/slow")
	_ = pathParams
	if err != nil {
		return nil, errors.Wrap(err, "cannot unmarshal path parameters")
	}

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPRandomErrorZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded randomerror request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPRandomErrorZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req pb.Empty
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		if err = json.Unmarshal(buf, &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, fmt.Errorf("request body '%s': cannot parse non-json request body", buf)
		}
	}

	pathParams, err := PathParams(r.URL.Path, "/randomerror")
	_ = pathParams
	if err != nil {
		return nil, errors.Wrap(err, "cannot unmarshal path parameters")
	}

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// EncodeHTTPGenericResponse is a transport/http.EncodeResponseFunc that encodes
// the response as JSON to the response writer. Primarily useful in a server.
func EncodeHTTPGenericResponse(_ context.Context, w http.ResponseWriter, response interface{}) error {
	encoder := json.NewEncoder(w)
	encoder.SetEscapeHTML(false)
	return encoder.Encode(response)
}

// Helper functions

// PathParams takes a url and a gRPC-annotation style url template, and
// returns a map of the named parameters in the template and their values in
// the given url.
//
// PathParams does not support the entirety of the URL template syntax defined
// in third_party/googleapis/google/api/httprule.proto. Only a small subset of
// the functionality defined there is implemented here.
func PathParams(url string, urlTmpl string) (map[string]string, error) {
	rv := map[string]string{}
	pmp := BuildParamMap(urlTmpl)

	expectedLen := len(strings.Split(strings.TrimRight(urlTmpl, "/"), "/"))
	recievedLen := len(strings.Split(strings.TrimRight(url, "/"), "/"))
	if expectedLen != recievedLen {
		return nil, fmt.Errorf("expecting a path containing %d parts, provided path contains %d parts", expectedLen, recievedLen)
	}

	parts := strings.Split(url, "/")
	for k, v := range pmp {
		rv[k] = parts[v]
	}

	return rv, nil
}

// BuildParamMap takes a string representing a url template and returns a map
// indicating the location of each parameter within that url, where the
// location is the index as if in a slash-separated sequence of path
// components. For example, given the url template:
//
//     "/v1/{a}/{b}"
//
// The returned param map would look like:
//
//     map[string]int {
//         "a": 2,
//         "b": 3,
//     }
func BuildParamMap(urlTmpl string) map[string]int {
	rv := map[string]int{}

	parts := strings.Split(urlTmpl, "/")
	for idx, part := range parts {
		if strings.ContainsAny(part, "{}") {
			param := RemoveBraces(part)
			rv[param] = idx
		}
	}
	return rv
}

// RemoveBraces replace all curly braces in the provided string, opening and
// closing, with empty strings.
func RemoveBraces(val string) string {
	val = strings.Replace(val, "{", "", -1)
	val = strings.Replace(val, "}", "", -1)
	return val
}

func headersToContext(ctx context.Context, r *http.Request) context.Context {
	for k, _ := range r.Header {
		// The key is added both in http format (k) which has had
		// http.CanonicalHeaderKey called on it in transport as well as the
		// strings.ToLower which is the grpc metadata format of the key so
		// that it can be accessed in either format
		ctx = context.WithValue(ctx, k, r.Header.Get(k))
		ctx = context.WithValue(ctx, strings.ToLower(k), r.Header.Get(k))
	}

	return ctx
}

func HTTPDecodeLogger(next httptransport.DecodeRequestFunc, logger log.Logger) httptransport.DecodeRequestFunc {
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		logger.Log("method", r.Method, "url", r.URL.String())
		rv, err := next(ctx, r)
		if err != nil {
			logger.Log("method", r.Method, "url", r.URL.String(), "Error", err)
		}
		return rv, err
	}
}
