// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metrics.proto

/*
Package metrics is a generated protocol buffer package.

It is generated from these files:
	metrics.proto

It has these top-level messages:
	Empty
*/
package metrics

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/TuneLab/go-truss/deftree/googlethirdparty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*Empty)(nil), "metrics.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Metrics service

type MetricsClient interface {
	// Fast responds fast
	Fast(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Slow responds slow
	Slow(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// RandomError produces errors sometimes
	RandomError(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type metricsClient struct {
	cc *grpc.ClientConn
}

func NewMetricsClient(cc *grpc.ClientConn) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) Fast(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/metrics.Metrics/Fast", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) Slow(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/metrics.Metrics/Slow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) RandomError(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/metrics.Metrics/RandomError", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Metrics service

type MetricsServer interface {
	// Fast responds fast
	Fast(context.Context, *Empty) (*Empty, error)
	// Slow responds slow
	Slow(context.Context, *Empty) (*Empty, error)
	// RandomError produces errors sometimes
	RandomError(context.Context, *Empty) (*Empty, error)
}

func RegisterMetricsServer(s *grpc.Server, srv MetricsServer) {
	s.RegisterService(&_Metrics_serviceDesc, srv)
}

func _Metrics_Fast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).Fast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.Metrics/Fast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).Fast(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_Slow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).Slow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.Metrics/Slow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).Slow(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_RandomError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).RandomError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.Metrics/RandomError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).RandomError(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Metrics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fast",
			Handler:    _Metrics_Fast_Handler,
		},
		{
			MethodName: "Slow",
			Handler:    _Metrics_Slow_Handler,
		},
		{
			MethodName: "RandomError",
			Handler:    _Metrics_RandomError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metrics.proto",
}

func init() { proto.RegisterFile("metrics.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0x2d, 0x29,
	0xca, 0x4c, 0x2e, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0xa5, 0xdc, 0xd2,
	0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x43, 0x4a, 0xf3, 0x52, 0x7d, 0x12,
	0x93, 0xf4, 0xd3, 0xf3, 0x75, 0x4b, 0x8a, 0x4a, 0x8b, 0x8b, 0xf5, 0x53, 0x52, 0xd3, 0x4a, 0x8a,
	0x52, 0x53, 0xf5, 0xd3, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0x4b, 0x32, 0x32, 0x8b, 0x52, 0x0a, 0x12,
	0x8b, 0x4a, 0x2a, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0x12, 0x4b, 0x32, 0xf3, 0xf3, 0xa0, 0x06,
	0x2a, 0xb1, 0x73, 0xb1, 0xba, 0xe6, 0x16, 0x94, 0x54, 0x1a, 0xed, 0x61, 0xe4, 0x62, 0xf7, 0x85,
	0x18, 0x2e, 0x64, 0xca, 0xc5, 0xe2, 0x96, 0x58, 0x5c, 0x22, 0xc4, 0xa7, 0x07, 0xb3, 0x1d, 0xac,
	0x46, 0x0a, 0x8d, 0xaf, 0xc4, 0xdb, 0x74, 0xf9, 0xc9, 0x64, 0x26, 0x76, 0x21, 0x56, 0xfd, 0x34,
	0x90, 0x72, 0x53, 0x2e, 0x96, 0xe0, 0x9c, 0xfc, 0x72, 0x62, 0xb5, 0x29, 0xb1, 0xea, 0x17, 0x83,
	0x94, 0x3b, 0x73, 0x71, 0x07, 0x25, 0xe6, 0xa5, 0xe4, 0xe7, 0xba, 0x16, 0x15, 0xe5, 0x17, 0x11,
	0xd4, 0x2d, 0x02, 0xd6, 0xcd, 0xa7, 0xc4, 0xa3, 0x5f, 0x04, 0xd6, 0x95, 0x0a, 0xd2, 0x95, 0xc4,
	0x06, 0xf6, 0x8e, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x6e, 0x37, 0x4c, 0x30, 0x01, 0x00,
	0x00,
}
